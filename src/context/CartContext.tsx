'use client'

import { generateCartItemId } from '@/lib/helper'
import { CartAttributeOption, CartContextType, CartItem } from '@/types/cart'
import { Attribute } from '@/types/products'
import { createContext, useContext, useEffect, useState } from 'react'

// T·∫°o context cho gi·ªè h√†ng
const CartContext = createContext<CartContextType | undefined>(undefined)

// H√†m t√≠nh to√°n gi√° c·ªßa c√°c thu·ªôc t√≠nh ƒë√£ ch·ªçn
export const calculateAttributesPrice = (attributes: CartAttributeOption[]) => {
  if (!Array.isArray(attributes)) return 0 // N·∫øu kh√¥ng ph·∫£i m·∫£ng, tr·∫£ v·ªÅ 0
  return attributes.reduce((sum, attr) => sum + attr.price, 0)
}

// CartProvider: Provider ƒë·ªÉ cung c·∫•p d·ªØ li·ªáu gi·ªè h√†ng cho c√°c component kh√°c
export const CartProvider = ({ children }: { children: React.ReactNode }) => {
  const [cart, setCart] = useState<CartItem[]>([])

  // Khi component ƒë∆∞·ª£c mount, ki·ªÉm tra xem c√≥ d·ªØ li·ªáu gi·ªè h√†ng trong localStorage kh√¥ng
  useEffect(() => {
    const savedCart = localStorage.getItem('cart')
    if (savedCart) {
      setCart(JSON.parse(savedCart)) // N·∫øu c√≥, l·∫•y d·ªØ li·ªáu v√† ƒë·∫∑t v√†o state
    }
  }, [])

  // Khi state cart thay ƒë·ªïi, l∆∞u gi·ªè h√†ng v√†o localStorage
  useEffect(() => {
    if (cart.length > 0) {
      localStorage.setItem('cart', JSON.stringify(cart))
    }
  }, [cart])

  // H√†m th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
  const addToCart = (
    item: CartItem,
    defaultImage: string,
    productAttributes: Attribute[]
  ) => {
    // ƒê·∫£m b·∫£o r·∫±ng d·ªØ li·ªáu thu·ªôc t√≠nh ƒë√£ ƒë∆∞·ª£c l·∫•y ƒë·∫ßy ƒë·ªß
    if (!item.attributes || item.attributes.length === 0) {
      console.error('Th√¥ng tin thu·ªôc t√≠nh ch∆∞a ƒë·∫ßy ƒë·ªß!')
      return
    }

    console.log('item cartcontext', item)
    console.log('item defaultImage', defaultImage)
    console.log('item productAttributes', productAttributes)

    setCart(prev => {
      const formattedAttributes: CartAttributeOption[] = Array.isArray(
        item.attributes
      )
        ? item.attributes
        : Object.values(item.attributes ?? {}) // Chuy·ªÉn object th√†nh array n·∫øu c·∫ßn

      // üõ† Fix: ƒê·∫£m b·∫£o `id` lu√¥n l√† string h·ª£p l·ªá
      const cartItemId =
        generateCartItemId(formattedAttributes) || `temp_${Date.now()}`
      // // Gi·ªØ l·∫°i ID hi·ªán t·∫°i c·ªßa s·∫£n ph·∫©m thay v√¨ t·∫°o ID m·ªõi
      // const cartItemId = item.id // S·ª≠ d·ª•ng ID hi·ªán t·∫°i

      console.log('prev', prev)
      console.log('cartItemId', cartItemId)

      // Ki·ªÉm tra n·∫øu s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng v·ªõi thu·ªôc t√≠nh gi·ªëng nhau
      const existingItem = prev.find(
        i =>
          i.id === cartItemId &&
          JSON.stringify(i.attributes) === JSON.stringify(formattedAttributes)
      )

      // X√°c ƒë·ªãnh h√¨nh ·∫£nh c·∫ßn l∆∞u (s·ª≠a l·ªói l·∫•y t·ª´ `formattedAttributes` thay v√¨ `item.attributes`)
      const selectedAttributeImage = formattedAttributes.find(
        attr => attr.image
      )?.image
      const finalImage = selectedAttributeImage || defaultImage // D√πng ·∫£nh thu·ªôc t√≠nh n·∫øu c√≥, ng∆∞·ª£c l·∫°i d√πng ·∫£nh m·∫∑c ƒë·ªãnh

      // N·∫øu s·∫£n ph·∫©m ƒë√£ c√≥ v√† thu·ªôc t√≠nh gi·ªëng nhau
      if (existingItem) {
        return prev.map(i =>
          i.id === cartItemId &&
          JSON.stringify(i.attributes) === JSON.stringify(formattedAttributes)
            ? {
                ...i,
                quantity: i.quantity + item.quantity, // C·ªông d·ªìn s·ªë l∆∞·ª£ng
                total: i.total + item.total // C·ªông d·ªìn gi√° tr·ªã t·ªïng
              }
            : i
        )
      } else {
        // N·∫øu s·∫£n ph·∫©m ch∆∞a c√≥ trong gi·ªè h√†ng, th√™m m·ªõi v√†o gi·ªè h√†ng
        return [
          ...prev,
          {
            ...item,
            id: cartItemId, // G√°n ID m·ªõi v√†o s·∫£n ph·∫©m trong gi·ªè h√†ng
            image: finalImage, // L∆∞u h√¨nh ·∫£nh v√†o gi·ªè h√†ng
            attributes: formattedAttributes, // üî• S·ª≠a: ƒê·∫£m b·∫£o l∆∞u `attributes` d∆∞·ªõi d·∫°ng array
            total:
              (item.price + calculateAttributesPrice(formattedAttributes)) *
              item.quantity, // T√≠nh t·ªïng gi√° tr·ªã c·ªßa s·∫£n ph·∫©m

            availableAttributes: productAttributes // L∆∞u attributes v√†o localStorage
          }
        ]
      }
    })
  }

  // H√†m x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
  const removeFromCart = (id: string) => {
    setCart(prev => prev.filter(item => item.id !== id)) // L·ªçc v√† lo·∫°i b·ªè s·∫£n ph·∫©m c√≥ id t∆∞∆°ng ·ª©ng
  }

  // H√†m c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
  const updateQuantity = (id: string, quantity: number) => {
    if (quantity <= 0) quantity = 1 // N·∫øu s·ªë l∆∞·ª£ng nh·ªè h∆°n ho·∫∑c b·∫±ng 0, ƒë·∫∑t v·ªÅ 1

    setCart(prev =>
      prev.map(item =>
        item.id === id
          ? {
              ...item,
              quantity, // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng m·ªõi
              total:
                (item.price + calculateAttributesPrice(item.attributes)) *
                quantity // C·∫≠p nh·∫≠t t·ªïng gi√° tr·ªã
            }
          : item
      )
    )
  }

  // H√†m x·ª≠ l√Ω thay ƒë·ªïi thu·ªôc t√≠nh size trong gi·ªè h√†ng
  const handleSizeChange = (item: CartItem, newSize: CartAttributeOption) => {
    const updatedAttributes = item.attributes.map(attr =>
      attr.attribute_id === newSize.attribute_id ? newSize : attr
    )

    // T·∫°o ID m·ªõi cho s·∫£n ph·∫©m d·ª±a tr√™n thu·ªôc t√≠nh size m·ªõi
    const updatedItemId = generateCartItemId(updatedAttributes)

    // T√≠nh l·∫°i t·ªïng gi√° tr·ªã c·ªßa s·∫£n ph·∫©m sau khi thay ƒë·ªïi size
    const updatedItem = {
      ...item,
      id: updatedItemId, // C·∫≠p nh·∫≠t l·∫°i ID
      attributes: updatedAttributes, // C·∫≠p nh·∫≠t thu·ªôc t√≠nh size m·ªõi
      total:
        (item.price +
          updatedAttributes.reduce((sum, attr) => sum + attr.price, 0)) *
        item.quantity // T√≠nh l·∫°i t·ªïng gi√° tr·ªã
    }

    // T√¨m s·∫£n ph·∫©m c√≥ ID c≈© trong gi·ªè h√†ng v√† thay th·∫ø n√≥ b·∫±ng s·∫£n ph·∫©m m·ªõi
    setCart(prev => {
      const existingItemIndex = prev.findIndex(i => i.id === item.id)
      if (existingItemIndex !== -1) {
        // N·∫øu t√¨m th·∫•y s·∫£n ph·∫©m c≈©, thay th·∫ø n√≥
        const updatedCart = [...prev]
        updatedCart[existingItemIndex] = updatedItem
        return updatedCart
      } else {
        // N·∫øu kh√¥ng t√¨m th·∫•y, th√™m s·∫£n ph·∫©m m·ªõi v√†o gi·ªè h√†ng
        return [...prev, updatedItem]
      }
    })
  }

  // H√†m x√≥a t·∫•t c·∫£ s·∫£n ph·∫©m trong gi·ªè h√†ng
  const clearCart = () => {
    setCart([]) // ƒê·∫∑t gi·ªè h√†ng th√†nh m·∫£ng r·ªóng
  }

  return (
    // Cung c·∫•p gi√° tr·ªã gi·ªè h√†ng v√† c√°c h√†m cho c√°c component con
    <CartContext.Provider
      value={{
        cart,
        addToCart,
        removeFromCart,
        updateQuantity,
        clearCart,
        handleSizeChange
      }}>
      {children}
    </CartContext.Provider>
  )
}

// Hook ƒë·ªÉ truy c·∫≠p gi·ªè h√†ng v√† c√°c h√†m x·ª≠ l√Ω gi·ªè h√†ng trong c√°c component
export const useCart = () => {
  const context = useContext(CartContext)
  if (!context) {
    throw new Error('useCart must be used within CartProvider')
  }
  return context
}
